# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Account implements IAccount {
  """
  ACCOUNT_JSON_TYPE
  """
  AccountJSONField: AccountJSON!

  """
  账号资料
  """
  AccountProfileField: AccountProfile!
  RecordFieldResolver: [Record!]!
  accountAvaliable: Boolean!
  accountId: ID!
  accountName: String!
  accountProfile: String!
  accountPwd: String!
  accountRole: AccountRole!
  accountType: AccountType!
  lastUpdateDate: Timestamp!
  registryDate: Timestamp!
  relatedRecord: [Record!]
}

type AccountJSON {
  _JUST_FOR_TEST_: Int!
}

"""
Login Input Type
"""
input AccountLoginInput {
  accountName: String!
  accountPwd: String!
  accountRole: AccountRole
  accountType: AccountType!
}

"""
Account Password Modify Input Type
"""
input AccountPasswordModifyInput {
  accountId: Int!
  accountName: String!
  newPassword: String!
  prevPassword: String!
}

type AccountProfile implements IAccountProfile {
  VIPLevel: AccountVIPLevel!
  avatar: String!
  isLifeTimeVIP: Boolean!
  selfIntro: String!
}

"""
Account Profile Query Input
"""
input AccountProfileQueryInput {
  VIPLevel: AccountVIPLevel
  avatar: String
  isLifeTimeVIP: Boolean
  selfIntro: String
}

"""
Account Profile Update Input
"""
input AccountProfileUpdateInput {
  VIPLevel: AccountVIPLevel
  avatar: String
  isLifeTimeVIP: Boolean
  selfIntro: String
}

"""
Register Input Type
"""
input AccountRegistryInput {
  accountName: String!
  accountPwd: String!
  accountRole: AccountRole
  accountType: AccountType
}

"""
Account Relations Input Type
"""
input AccountRelationsInput {
  joinRecord: Boolean
}

"""
Account Role Enum
"""
enum AccountRole {
  ENTERPRISE
  GOV
  ORG
  PERSONAL
  UNKNOWN
}

"""
Primitive Response Status Indicator
"""
type AccountStatus implements IBaseStatus {
  data: [Account!]
  message: String!
  success: Boolean!
}

"""
Account Type Enum
"""
enum AccountType {
  ADMIN
  COMMON
  DOMINATOR
  VISITOR
}

union AccountUnionResult = AccountStatus | LoginOrRegisterStatus

"""
Account VIP Level Enum
"""
enum AccountVIPLevel {
  DIAMOND
  DOMINATOR
  GOLD
  NON_VIP
  SILVER
}

"""
For @auth usage only
"""
enum AuthDirectiveRoleEnum {
  ADMIN
  REVIEWER
  UNKNOWN
  USER
}

"""
Recipe >>> Cook >>> WorkExperience >> Company
"""
type Company {
  description: String!
  name: String!
  registerDate: Timestamp!
  scale: CompanyScale!
}

"""
Company Scale
"""
enum CompanyScale {
  Huge
  Middle
  Small
}

"""
Recipe >>> Cook
"""
type Cook {
  WorkExperienceExtraFieldResolver(year: Float!): WorkExperience!
  experience: WorkExperience!
  name: String!
  yearsOfExperience: Int!
}

"""
All possible preparation difficulty levels
"""
enum Difficulty {
  Beginner
  Easy
  Hard
  MasterChef
  Medium
}

"""
Executor Skill & Task Difficulty Level Enum
"""
enum DifficultyLevel {
  BEGINNER
  LEGEND
  MASTER
  NOVICE
  OLD_DOMINATOR
  ROOKIE
  SKILLED
}

type Executor implements IExecutor {
  """
  获取对象类型的执行者描述
  """
  ExecutorDescField: ExecutorDesc!
  ExecutorInnerTaskFieldResolver: [Task!]!
  age: Float!
  avaliable: Boolean!
  desc: String!
  isFool: Boolean!
  job: Job!
  joinDate: Timestamp!
  lastUpdateDate: Timestamp!
  name: String!
  region: Region!
  relatedRecord: [Record!]
  spAgeField(param: Float): Int!
  tasks: [Task!]
  uid: ID!
}

"""
Executor Create Input
"""
input ExecutorCreateInput {
  age: Int
  avaliable: Boolean
  isFool: Boolean
  job: Job
  name: String!
  region: Region
}

type ExecutorDesc implements IExecutorDesc {
  level: DifficultyLevel!
  satisfaction: Int
  successRate: Int
}

"""
Update Executor Desc Input
"""
input ExecutorDescUpdateInput {
  level: DifficultyLevel
  satisfaction: Int
  successRate: Int
}

"""
Executor Relations Input
"""
input ExecutorRelationsInput {
  joinRecord: Boolean = false
  joinSubstance: Boolean = false
  joinTasks: Boolean = false
}

"""
Executor Response Status Indicator
"""
type ExecutorStatus implements IBaseStatus {
  data: [Executor!]
  message: String!
  success: Boolean!
}

"""
Executor Update Input
"""
input ExecutorUpdateInput {
  age: Int
  avaliable: Boolean
  isFool: Boolean
  job: Job
  name: String
  region: Region
  uid: Float!
}

"""
Account Interface Type
"""
interface IAccount {
  accountAvaliable: Boolean!
  accountId: ID!
  accountName: String!
  accountProfile: String!
  accountPwd: String!
  accountRole: AccountRole!
  accountType: AccountType!
  lastUpdateDate: Timestamp!
  registryDate: Timestamp!
  relatedRecord: [Record!]
}

"""
Account Profile Type
"""
interface IAccountProfile {
  VIPLevel: AccountVIPLevel!
  avatar: String!
  isLifeTimeVIP: Boolean!
  selfIntro: String!
}

"""
Basic Status Wrapper
"""
interface IBaseStatus {
  message: String!
  success: Boolean!
}

"""
Update Executor Basic Info Input
"""
interface IExecutor {
  age: Float!
  avaliable: Boolean!
  desc: String!
  isFool: Boolean!
  job: Job!
  joinDate: Timestamp!
  lastUpdateDate: Timestamp!
  name: String!
  region: Region!
  relatedRecord: [Record!]
  spAgeField: Int
  tasks: [Task!]
  uid: ID!
}

"""
Executor Interface Type
"""
interface IExecutorDesc {
  level: DifficultyLevel!
  satisfaction: Int
  successRate: Int
}

"""
Record Interface Type
"""
interface IRecord {
  createDate: Timestamp!
  lastUpdateDate: Timestamp!
  recordAccount: Account
  recordExecutor: Executor
  recordId: ID!
  recordSubstance: Substance
  recordTask: Task
}

"""
Substance Interface Type
"""
interface ISubstance {
  asylumed: Boolean!
  lastActiveDate: Timestamp!
  relatedRecord: [Record!]
  relatedTask: Task
  substanceAlive: Boolean!
  substanceAppearDate: Timestamp!
  substanceDesc: String!
  substanceId: ID!
  substanceIssues: String!
  substanceLevel: DifficultyLevel!
  substanceName: String!
}

"""
Task Interface Type
"""
interface ITask {
  allowAbort: Boolean!
  assignee: Executor
  lastUpdateDate: Timestamp!
  publishDate: Timestamp!
  relatedRecord: [Record!]
  requireCleaner: Boolean!
  requirePsychologicalIntervention: Boolean!
  taskAccmplished: Boolean!
  taskAvaliable: Boolean!
  taskContent: String!
  taskId: ID!
  taskLevel: DifficultyLevel!
  taskRate: Int!
  taskReward: Int!
  taskSource: TaskSource!
  taskSubstance: Substance
  taskTarget: TaskTarget!
  taskTitle: String!
}

"""
Executor Job Enum
"""
enum Job {
  BE
  FE
}

union LevelQueryResult = Executor | Task

"""
Login / Register Status Indicator
"""
type LoginOrRegisterStatus implements IBaseStatus {
  expiredDate: Int
  message: String!
  success: Boolean!
  token: String
}

type Mutation {
  """
  用户永久注销
  """
  AccountDestory(
    accountName: String!
    accountPwd: String!
  ): LoginOrRegisterStatus!

  """
  提升/下降 用户类型
  """
  AccountLevelMutate(accountId: Int!, type: AccountType!): AccountUnionResult!

  """
  新用户注册
  """
  AccountRegistry(account: AccountRegistryInput!): LoginOrRegisterStatus!

  """
  指派任务
  """
  AssignTask(taskId: Float!, uid: Float!): TaskStatus!

  """
  将实体关联到任务
  """
  CombineSubstanceAndTask(substanceId: Int!, taskId: Int!): SubstanceStatus!

  """
  添加执行者
  """
  CreateExecutor(newExecutorInfo: ExecutorCreateInput!): ExecutorStatus!

  """
  创建任务同时关联到实体
  """
  CreateNewTask(taskCreateParam: TaskCreateInput!): TaskStatus!

  """
  新增实体
  """
  CreateSubstance(substanceCreateParam: SubstanceCreateInput!): SubstanceStatus!

  """
  删除执行者
  """
  DeleteExecutor(uid: Int!): ExecutorStatus!

  """
  删除实体
  """
  DeleteSubstance(substanceId: Int!): SubstanceStatus!

  """
  删除任务
  """
  DeleteTask(taskId: Float!): TaskStatus!

  """
  冻结账号
  """
  FreezeAccount(accountId: Int!): AccountStatus!

  """
  冻结任务 无法恢复
  """
  FreezeTask(taskId: Float!): TaskStatus!

  """
  修改密码
  """
  ModifyPassword(
    accountInfo: AccountPasswordModifyInput!
  ): LoginOrRegisterStatus!

  """
  账号详情变更
  """
  MutateAccountProfile(
    accountId: Int!
    modifiedAccountProfile: AccountProfileUpdateInput!
  ): AccountStatus!

  """
  变更用户角色
  """
  MutateAccountRole: LoginOrRegisterStatus!

  """
  变更任务级别
  """
  MutateTaskLevel(level: DifficultyLevel!, taskId: Float!): TaskStatus!

  """
  发送邮件验证码
  """
  SendEmailVerifyCode: LoginOrRegisterStatus!

  """
  发送短信验证码
  """
  SendPhoneVerifyCode: LoginOrRegisterStatus!

  """
  变更任务状态
  """
  ToggleTaskStatus(taskId: Float!): TaskStatus!

  """
  更新执行者基本信息
  """
  UpdateExecutorBasicInfo(
    modifiedExecutorInfo: ExecutorUpdateInput!
  ): ExecutorStatus!

  """
  更新执行者描述
  """
  UpdateExecutorDesc(
    uid: Int!
    userDesc: ExecutorDescUpdateInput!
  ): ExecutorStatus!

  """
  变更实体信息
  """
  UpdateSubstanceInfo(
    substanceUpdateParam: SubstanceUpdateInput!
  ): SubstanceStatus!

  """
  变更任务基本信息
  """
  UpdateTaskInfo(taskUpdateParam: TaskUpdateInput!): TaskStatus!
  pubSubMutation(message: String): Boolean!
  pubSubMutationToDynamicTopic(message: String, topic: String!): Boolean!
  publisherMutation(message: String): Boolean!
}

type Notification {
  date: Timestamp!
  id: ID!
  message: String
}

"""
Pagination Options Input
"""
input PaginationOptions {
  offset: Int
  take: Int
}

type Query {
  """
  账号登录
  """
  AccountLogin(account: AccountLoginInput!): LoginOrRegisterStatus!

  """
  账号详情
  """
  CheckAccountDetail(
    accountId: Int!
    relations: AccountRelationsInput
  ): AccountStatus!

  """
  检验token是否合法
  """
  CheckIsTokenValid(token: String!): LoginOrRegisterStatus!

  """
  验证邮件
  """
  CheckVerifyCode: LoginOrRegisterStatus!

  """
  容器注册时间
  """
  ContainerRegisterTime: Timestamp!

  """
  基于资料查找用户
  """
  QueryAccountByProfile(
    pagination: PaginationOptions
    profileQueryParams: AccountProfileQueryInput
    relations: AccountRelationsInput
  ): AccountStatus!

  """
  查询所有用户
  """
  QueryAllAccounts(
    pagination: PaginationOptions
    relations: AccountRelationsInput
  ): AccountStatus!

  """
  获取所有执行者
  """
  QueryAllExecutors(
    pagination: PaginationOptions
    relations: ExecutorRelationsInput
  ): ExecutorStatus!
  QueryAllPrismaItems: [TodoItem!]!
  QueryAllPrismaUsers: [User!]!
  QueryAllRecords(relations: RecordRelationsInput): RecordStatus!

  """
  查找所有实体信息
  """
  QueryAllSubstances(
    pagination: PaginationOptions
    relations: SubstanceRelationsInput
  ): SubstanceStatus!

  """
  获取所有任务
  """
  QueryAllTasks(
    pagination: PaginationOptions
    relations: TaskRelationsInput
  ): TaskStatus!

  """
  基于级别获取所有执行者与任务
  """
  QueryByDifficultyLevel(
    difficulty: DifficultyLevel
    pagination: PaginationOptions
  ): [LevelQueryResult!]!

  """
  根据基本条件查找执行者
  """
  QueryExecutorByConditions(
    age: Int
    avaliable: Boolean
    isFool: Boolean
    job: Job
    name: String
    region: Region
    relations: ExecutorRelationsInput
  ): ExecutorStatus!

  """
  根据描述（等级、成功率、评分）查找执行者
  """
  QueryExecutorByDesc(
    level: DifficultyLevel
    pagination: PaginationOptions
    relations: ExecutorRelationsInput
    satisfaction: Int
    successRate: Int
  ): ExecutorStatus!

  """
  根据ID查找特定执行者信息
  """
  QueryExecutorById(
    relations: ExecutorRelationsInput
    uid: Int!
  ): ExecutorStatus!

  """
  查询执行者当前被分配的任务
  """
  QueryExecutorTasks(
    pagination: PaginationOptions
    relations: TaskRelationsInput
    uid: Float!
  ): TaskStatus!

  """
  基于条件查找单个实体
  """
  QueryOneSubstanceByConditions(
    relations: SubstanceRelationsInput
    substanceQueryParam: SubstanceQueryInput!
  ): SubstanceStatus!

  """
  返回所有菜谱 厨师 和 咸鱼
  """
  QueryRecipeUnions: [RecipeUnionResult!]!

  """
  基于难度查找菜谱
  """
  QueryRecipesByDifficulty(difficulty: Difficulty): [Recipe!]!

  """
  基于作料查找菜谱
  """
  QueryRecipesByIngredients(ingredients: [String!]): [Recipe!]!
  QueryRecordById(
    recordId: Int!
    relations: RecordRelationsInput
  ): RecordStatus!

  """
  根据恩格尔系数查找咸鱼
  """
  QuerySaltFishByCoefficient(coefficient: Int): [SaltFish!]!

  """
  基于ID查找实体
  """
  QuerySubstanceById(
    relations: SubstanceRelationsInput
    substanceId: Int!
  ): SubstanceStatus!

  """
  基于条件查找多个实体
  """
  QuerySubstancesByConditions(
    pagination: PaginationOptions
    relations: SubstanceRelationsInput
    substanceQueryParam: SubstanceQueryInput!
  ): SubstanceStatus!

  """
  基于条件获取单个任务
  """
  QueryTaskByConditions(
    relations: TaskRelationsInput
    taskQueryParams: TaskQueryInput!
  ): TaskStatus!

  """
  基于ID获取任务
  """
  QueryTaskByID(relations: TaskRelationsInput, taskId: Float!): TaskStatus!

  """
  基于条件获取多个任务
  """
  QueryTasksByConditions(
    pagination: PaginationOptions
    relations: TaskRelationsInput
    taskQueryParams: TaskQueryInput!
  ): TaskStatus!

  """
  DataLoader 实际效果演示
  """
  Recipes: [Recipe!]!
  currentDate: Timestamp!
}

"""
Recipe Type
"""
type Recipe {
  CookExtraFieldResolver(name: String!): Cook!
  RecipeExtraFieldResolver(title: String!): Recipe
  cook: Cook!
  description: String
  ingredients: [String!]
  preparationDifficulty: Difficulty
  title: String!
}

union RecipeUnionResult = Cook | Recipe | SaltFish

type Record implements IRecord {
  RecordInnerExecutorFieldResolver: [Executor!]!
  RecordInnerSubstanceFieldResolver: [Substance!]!
  RecordInnerTaskFieldResolver: [Task!]!
  createDate: Timestamp!
  lastUpdateDate: Timestamp!
  recordAccount: Account
  recordExecutor: Executor
  recordId: ID!
  recordSubstance: Substance
  recordTask: Task
}

"""
Record Relations Input
"""
input RecordRelationsInput {
  joinAccount: Boolean = true
  joinExecutor: Boolean = true
  joinSubstance: Boolean = true
  joinTask: Boolean = true
}

"""
Record Response Status Indicator
"""
type RecordStatus implements IBaseStatus {
  data: [Record!]
  message: String!
  success: Boolean!
}

"""
Executor Region Enum
"""
enum Region {
  ABANDONED
  CENTRAL
  NORTH
  OTHER
  PACIFIC_OCEAN
  SOUTH
}

"""
useless object type in union type, just for funny:)
"""
type SaltFish {
  EngelCoefficient: Int!
  date: Timestamp!
  fishName: String!
  num: Int
  role: AuthDirectiveRoleEnum
  str: String
}

type Subscription {
  normalSubscription: Notification!
  subscriptionWithFilter: Notification!
  subscriptionWithFilterToDynamicTopic(topic: String!): Notification!
}

type Substance implements ISubstance {
  asylumed: Boolean!
  lastActiveDate: Timestamp!
  relatedRecord: [Record!]
  relatedTask: Task
  substanceAlive: Boolean!
  substanceAppearDate: Timestamp!
  substanceDesc: String!
  substanceId: ID!
  substanceIssues: String!
  substanceLevel: DifficultyLevel!
  substanceName: String!
}

"""
Substance Create Input
"""
input SubstanceCreateInput {
  asylumed: Boolean
  substanceAlive: Boolean
  substanceIssues: String
  substanceLevel: DifficultyLevel
  substanceName: String!
}

"""
Substance Create Input
"""
input SubstanceQueryInput {
  asylumed: Boolean
  substanceAlive: Boolean
  substanceIssues: String
  substanceLevel: DifficultyLevel
  substanceName: String
}

"""
Substance Relations Input
"""
input SubstanceRelationsInput {
  joinAssignee: Boolean = false
  joinRecord: Boolean = false
  joinTask: Boolean = false
}

"""
Substance Response Status Indicator
"""
type SubstanceStatus implements IBaseStatus {
  data: [Substance!]
  message: String!
  success: Boolean!
}

"""
Substance Update Input
"""
input SubstanceUpdateInput {
  asylumed: Boolean
  substanceAlive: Boolean
  substanceId: Int!
  substanceIssues: String
  substanceLevel: DifficultyLevel
  substanceName: String
}

type Task implements ITask {
  TaskInnerExecutorFieldResolver: Executor!
  TaskInnerSubstanceFieldResolver: Substance!
  allowAbort: Boolean!
  assignee: Executor
  lastUpdateDate: Timestamp!
  publishDate: Timestamp!
  relatedRecord: [Record!]
  requireCleaner: Boolean!
  requirePsychologicalIntervention: Boolean!
  taskAccmplished: Boolean!
  taskAvaliable: Boolean!
  taskContent: String!
  taskId: ID!
  taskLevel: DifficultyLevel!
  taskRate: Int!
  taskReward: Int!
  taskSource: TaskSource!
  taskSubstance: Substance
  taskTarget: TaskTarget!
  taskTitle: String!
}

"""
Task Create Input
"""
input TaskCreateInput {
  allowAbort: Boolean
  requireCleaner: Boolean
  requirePsychologicalIntervention: Boolean
  substanceId: ID!
  taskAvaliable: Boolean
  taskContent: String
  taskLevel: DifficultyLevel
  taskRate: Int
  taskReward: Int
  taskSource: TaskSource
  taskTarget: TaskTarget
  taskTitle: String!
}

"""
Task Query Input
"""
input TaskQueryInput {
  allowAbort: Boolean
  requireCleaner: Boolean
  requirePsychologicalIntervention: Boolean
  taskAvaliable: Boolean
  taskContent: String
  taskLevel: DifficultyLevel
  taskRate: Int
  taskReward: Int
  taskSource: TaskSource
  taskTarget: TaskTarget
  taskTitle: String
}

"""
Task Relations Input
"""
input TaskRelationsInput {
  joinAssignee: Boolean = false
  joinRecord: Boolean = false
  joinSubstance: Boolean = false
}

"""
Task Source
"""
enum TaskSource {
  GOV
  MERCHANT
  OTHER
  PERSONAL
  SCP
}

"""
Task Response Status Indicator
"""
type TaskStatus implements IBaseStatus {
  data: [Task!]
  message: String!
  success: Boolean!
}

"""
Task Against
"""
enum TaskTarget {
  AI
  ALIEN
  CTHULHU
  HUMAN
  OTHER
  SCP_ITEM
  WITCHER
}

"""
Task Update Input
"""
input TaskUpdateInput {
  allowAbort: Boolean
  requireCleaner: Boolean
  requirePsychologicalIntervention: Boolean
  taskAvaliable: Boolean
  taskContent: String
  taskId: Int!
  taskLevel: DifficultyLevel
  taskRate: Int
  taskReward: Int
  taskSource: TaskSource
  taskTarget: TaskTarget
  taskTitle: String
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type TodoItem {
  content: String
  createdAt: Timestamp!
  id: ID!
  owner: User
  ownerId: Int
  title: String!
  updatedAt: Timestamp!
}

type User {
  id: ID!
  items: [TodoItem!]
  name: String!
  nickName: String
}

"""
Recipe >>> Cook >>> WorkExperience
"""
type WorkExperience {
  CompanyExtraFieldResolver(name: String!): Company!
  company: Company!
  isFired: Boolean!
  workYears: Int!
}
